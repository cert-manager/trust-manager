# -- Number of replicas of trust-manager to run.
replicaCount: 1

# -- The namespace to install trust-manager into.
# If not set, the namespace of the release will be used.
# This is helpful when installing trust-manager as a chart dependency (sub chart)
namespace: ""

# -- For Private docker registries, authentication is needed. Registry secrets are applied to the service account
imagePullSecrets: []

image:
  # -- Target image repository.
  repository: quay.io/jetstack/trust-manager
  # -- Target image registry. Will be prepended to the target image repositry if set.
  registry:

  # -- Target image version tag. Defaults to the chart's appVersion.
  tag:

  # -- Target image digest. Will override any tag if set.
  # for example:
  # digest: sha256:0e072dddd1f7f8fc8909a2ca6f65e76c5f0d2fcfb8be47935ae3457e8bbceb20
  digest:

  # -- Kubernetes imagePullPolicy on Deployment.
  pullPolicy: IfNotPresent

defaultPackage:
  # -- Whether to load the default trust package during pod initialization and include it in main container args. This container enables the 'useDefaultCAs' source on Bundles.
  enabled: true

defaultPackageImage:
  # -- Repository for the default package image. This image enables the 'useDefaultCAs' source on Bundles.
  repository: quay.io/jetstack/cert-manager-package-debian
  # -- Target image registry. Will be prepended to the target image repositry if set.
  registry:

  # -- Tag for the default package image
  tag: "20210119.0"

  # -- Target image digest. Will override any tag if set.
  # for example:
  # digest: sha256:0e072dddd1f7f8fc8909a2ca6f65e76c5f0d2fcfb8be47935ae3457e8bbceb20
  digest:

  # -- imagePullPolicy for the default package image
  pullPolicy: IfNotPresent

app:
  # -- Verbosity of trust-manager logging; takes a value from 1-5, with higher being more verbose
  logLevel: 1
  
  metrics:
    # -- Port for exposing Prometheus metrics on 0.0.0.0 on path '/metrics'.
    port: 9402
    # -- Service to expose metrics endpoint.
    service:
      # -- Create a Service resource to expose metrics endpoint.
      enabled: true
      # -- Service type to expose metrics.
      type: ClusterIP
      # -- ServiceMonitor resource for this Service.
      servicemonitor:
        enabled: false
        prometheusInstance: default
        interval: 10s
        scrapeTimeout: 5s
        labels: {}

  readinessProbe:
    # -- Container port on which to expose trust-manager HTTP readiness probe using default network interface.
    port: 6060
    # -- Path on which to expose trust-manager HTTP readiness probe using default network interface.
    path: "/readyz"

  trust:
    # -- Namespace used as trust source. Note that the namespace _must_ exist
    # before installing trust-manager.
    namespace: cert-manager

  webhook:
    # -- Host that the webhook listens on.
    host: 0.0.0.0
    # -- Port that the webhook listens on.
    port: 6443
    # -- Timeout of webhook HTTP request.
    timeoutSeconds: 5
    # -- Type of Kubernetes Service used by the Webhook
    service:
      type: ClusterIP

    tls:
      approverPolicy:
        # -- Whether to create an approver-policy CertificateRequestPolicy allowing auto-approval of the trust-manager webhook certificate. If you have approver-policy installed, you almost certainly want to enable this.
        enabled: false

        # -- Namespace in which cert-manager was installed. Only used if app.webhook.tls.approverPolicy.enabled is true
        certManagerNamespace: "cert-manager"

        # -- Name of cert-manager's ServiceAccount. Only used if app.webhook.tls.approverPolicy.enabled is true
        certManagerServiceAccount: "cert-manager"

    # -- Specifies if the app should be started in hostNetwork mode. Required for use in some managed kubernetes clusters (such as AWS EKS) with custom CNI.
    hostNetwork: false

  securityContext:
    # -- If false, disables the default seccomp profile, which might be required to run on certain platforms
    seccompProfileEnabled: true

  # -- Pod labels to add to trust-manager pods.
  podLabels: {}

  # -- Pod annotations to add to trust-manager pods.
  podAnnotations: {}

secretTargets:
  # -- If set to true, enable writing trust bundles to Kubernetes Secrets as a target.
  # trust-manager can only write to secrets which are explicitly allowed via either authorizedSecrets or authorizedSecretsAll.
  # NOTE: Enabling secret targets will grant trust-manager read access to all secrets in the cluster.
  enabled: false
  # -- If set to true, grant read/write permission to all secrets across the cluster. Use with caution!
  # If set, ignores the authorizedSecrets list.
  authorizedSecretsAll: false
  # -- A list of secret names which trust-manager will be permitted to read and write across all namespaces.
  # These will be the only allowable Secrets that can be used as targets. If the list is empty (and authorizedSecretsAll is false),
  # trust-manager will not be able to write to secrets and will only be able to read secrets in the trust namespace for use as sources.
  authorizedSecrets: []

resources: {}
  # -- Kubernetes pod resource limits for trust.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # -- Kubernetes pod memory resource requests for trust.
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# -- Configure the priority class of the pod; see https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/#priorityclass
priorityClassName: ""

# -- Configure the nodeSelector; defaults to any Linux node (trust-manager doesn't support Windows nodes)
nodeSelector:
  kubernetes.io/os: linux

# Kubernetes Affinty; see https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/#affinity-v1-core
# for example:
#   affinity:
#     nodeAffinity:
#      requiredDuringSchedulingIgnoredDuringExecution:
#        nodeSelectorTerms:
#        - matchExpressions:
#          - key: foo.bar.com/role
#            operator: In
#            values:
#            - master
# -- Kubernetes Affinty; see https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/#affinity-v1-core
affinity: {}

# List of Kubernetes Tolerations, if required; see https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/#toleration-v1-core
# for example:
#   tolerations:
#   - key: foo.bar.com/role
#     operator: Equal
#     value: master
#     effect: NoSchedule
# -- List of Kubernetes Tolerations; see https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/#toleration-v1-core
tolerations: []

# List of Kubernetes TopologySpreadConstraints; see https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/#topologyspreadconstraint-v1-core
# for example:
#   topologySpreadConstraints:
#   - maxSkew: 2
#     topologyKey: topology.kubernetes.io/zone
#     whenUnsatisfiable: ScheduleAnyway
#     labelSelector:
#       matchLabels:
#         app.kubernetes.io/instance: cert-manager
#         app.kubernetes.io/component: controller
# -- List of Kubernetes TopologySpreadConstraints; see https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/#topologyspreadconstraint-v1-core
topologySpreadConstraints: []

crds:
  # -- Whether or not to install the crds.
  enabled: true
