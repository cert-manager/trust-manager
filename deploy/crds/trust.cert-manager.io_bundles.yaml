apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.13.0
  name: bundles.trust.cert-manager.io
spec:
  group: trust.cert-manager.io
  names:
    kind: Bundle
    listKind: BundleList
    plural: bundles
    singular: bundle
  scope: Cluster
  versions:
    - additionalPrinterColumns:
        - description: Bundle Target Key
          jsonPath: .status.target.configMap.key
          name: Target
          type: string
        - description: Bundle has been synced
          jsonPath: .status.conditions[?(@.type == "Synced")].status
          name: Synced
          type: string
        - description: Reason Bundle has Synced status
          jsonPath: .status.conditions[?(@.type == "Synced")].reason
          name: Reason
          type: string
        - description: Timestamp Bundle was created
          jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
      name: v1alpha1
      schema:
        openAPIV3Schema:
          type: object
          required:
            - spec
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: Desired state of the Bundle resource.
              type: object
              required:
                - sources
                - target
              properties:
                sources:
                  description: Sources is a set of references to data whose data will sync to the target.
                  type: array
                  items:
                    description: BundleSource is the set of sources whose data will be appended and synced to the BundleTarget in all Namespaces.
                    type: object
                    properties:
                      configMap:
                        description: ConfigMap is a reference to a ConfigMap's `data` key, in the trust Namespace.
                        type: object
                        required:
                          - key
                          - name
                        properties:
                          key:
                            description: Key is the key of the entry in the object's `data` field to be used.
                            type: string
                          name:
                            description: Name is the name of the source object in the trust Namespace.
                            type: string
                      inLine:
                        description: InLine is a simple string to append as the source data.
                        type: string
                      secret:
                        description: Secret is a reference to a Secrets's `data` key, in the trust Namespace.
                        type: object
                        required:
                          - key
                          - name
                        properties:
                          key:
                            description: Key is the key of the entry in the object's `data` field to be used.
                            type: string
                          name:
                            description: Name is the name of the source object in the trust Namespace.
                            type: string
                      useDefaultCAs:
                        description: UseDefaultCAs, when true, requests the default CA bundle to be used as a source. Default CAs are available if trust-manager was installed via Helm or was otherwise set up to include a package-injecting init container by using the "--default-package-location" flag when starting the trust-manager controller. If default CAs were not configured at start-up, any request to use the default CAs will fail. The version of the default CA package which is used for a Bundle is stored in the defaultCAPackageVersion field of the Bundle's status field.
                        type: boolean
                target:
                  description: Target is the target location in all namespaces to sync source data to.
                  type: object
                  properties:
                    additionalFormats:
                      description: AdditionalFormats specifies any additional formats to write to the target
                      type: object
                      properties:
                        jks:
                          description: JKS requests a JKS-formatted binary trust bundle to be written to the target. The bundle is created with the hardcoded password "changeit".
                          type: object
                          required:
                            - key
                          properties:
                            key:
                              description: Key is the key of the entry in the object's `data` field to be used.
                              type: string
                        pkcs12:
                          description: PKCS12 requests a PKCS12-formatted binary trust bundle to be written to the target. The bundle is created without a password.
                          type: object
                          required:
                            - key
                          properties:
                            key:
                              description: Key is the key of the entry in the object's `data` field to be used.
                              type: string
                    configMap:
                      description: ConfigMap is the target ConfigMap in Namespaces that all Bundle source data will be synced to.
                      type: object
                      required:
                        - key
                      properties:
                        key:
                          description: Key is the key of the entry in the object's `data` field to be used.
                          type: string
                    namespaceSelector:
                      description: NamespaceSelector will, if set, only sync the target resource in Namespaces which match the selector.
                      type: object
                      properties:
                        matchLabels:
                          description: MatchLabels matches on the set of labels that must be present on a Namespace for the Bundle target to be synced there.
                          type: object
                          additionalProperties:
                            type: string
                    secret:
                      description: Secret is the target Secret that all Bundle source data will be synced to. Using Secrets as targets is only supported if enabled at trust-manager startup. By default, trust-manager has no permissions for writing to secrets and can only read secrets in the trust namespace.
                      type: object
                      required:
                        - key
                      properties:
                        key:
                          description: Key is the key of the entry in the object's `data` field to be used.
                          type: string
            status:
              description: Status of the Bundle. This is set and managed automatically.
              type: object
              properties:
                conditions:
                  description: List of status conditions to indicate the status of the Bundle. Known condition types are `Bundle`.
                  type: array
                  items:
                    description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                    type: object
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    properties:
                      lastTransitionTime:
                        description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        type: string
                        format: date-time
                      message:
                        description: message is a human readable message indicating details about the transition. This may be an empty string.
                        type: string
                        maxLength: 32768
                      observedGeneration:
                        description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                        type: integer
                        format: int64
                        minimum: 0
                      reason:
                        description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                        type: string
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        type: string
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                      type:
                        description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                        type: string
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                  x-kubernetes-list-map-keys:
                    - type
                  x-kubernetes-list-type: map
                defaultCAVersion:
                  description: DefaultCAPackageVersion, if set and non-empty, indicates the version information which was retrieved when the set of default CAs was requested in the bundle source. This should only be set if useDefaultCAs was set to "true" on a source, and will be the same for the same version of a bundle with identical certificates.
                  type: string
      served: true
      storage: true
      subresources:
        status: {}
